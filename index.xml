<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Marat's blog</title><link>https://kopytjuk.github.io/</link><description>Recent content on Marat's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 27 Nov 2022 14:30:00 +0200</lastBuildDate><atom:link href="https://kopytjuk.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Bringing accident scene diagrams to life for AV simulation</title><link>https://kopytjuk.github.io/posts/bringing-crash-scene-diagrams-to-life/</link><pubDate>Sun, 27 Nov 2022 14:30:00 +0200</pubDate><guid>https://kopytjuk.github.io/posts/bringing-crash-scene-diagrams-to-life/</guid><description>Table Of Contents Foreword Using NHTSA accidents to improve safety Methodology Step 1: Extracting vehicle shapes from the diagram Step 2: Associate shapes to actual vehicles Step 3: Order waypoints by occurrence Step 4: Generate drivable trajectories Summary References Foreword When it comes to safety of autonomous vehicles (AV), we as a society often claim that such a system must be safer as an average human driver. To validate this requirement, the industry pushes metrics such as accident-free travelled distance, expecting to cover the most critical situations an AV would face.</description></item><item><title>An extensible and modular architecture for evaluation of dynamic systems in real world environments</title><link>https://kopytjuk.github.io/posts/kpi-architecture/</link><pubDate>Mon, 21 Mar 2022 11:00:00 +0100</pubDate><guid>https://kopytjuk.github.io/posts/kpi-architecture/</guid><description>Introduction Evaluating complex systems operating in noisy real world environments is hard. Especially if you are dealing with dynamic behaviour over time, the requirements to the evaluation toolchain grow with every novel insight. In the beginning, you just want to compute just a single number describing algorithm&amp;rsquo;s performance (like mean squared error - MSE), but over the project&amp;rsquo;s lifetime your requirements to the evaluation framework grow: at some point you wish to generate static visualizations, create reports over a time range, dig deep at some specific situations or simply render both the algorithm&amp;rsquo;s output and the corresponding ground-truth (GT) in a video file for human analysis.</description></item><item><title>Vehicle trajectory analysis in Frenet-Serret coordinates on the Large-Scale Roundabout Drone Dataset (OpenDD)</title><link>https://kopytjuk.github.io/posts/open-dd-analysis/</link><pubDate>Sun, 06 Mar 2022 12:00:00 +0100</pubDate><guid>https://kopytjuk.github.io/posts/open-dd-analysis/</guid><description>TL;DR; This blog post presents the benefits of Frenet-Serret coordinate system for driving trajectory analysis (in Python). This system is defined by a reference path, such as a driving lane and facilitates traffic analysis. As an showcase example, the delay times and distances between vehicles in a roundabout setting are analyzed. The trajectories captured from a bird-view perspective (DJI drone) from the OpenDD dataset are used. In the end of the post, the reader will value the advantages of Frenet-Serret frames compared to a conventional metric approach when it comes to trajectory analysis in a real-world setting.</description></item><item><title>Wrap C++ algorithms in Python for pre-production evaluation and experimentation.</title><link>https://kopytjuk.github.io/posts/wrapping-cpp-algorithms/</link><pubDate>Mon, 13 Sep 2021 11:19:40 +0100</pubDate><guid>https://kopytjuk.github.io/posts/wrapping-cpp-algorithms/</guid><description>TLDR; In model based design paradigm one often implements a proof-of-concept solution in a scripting language before porting the logic to a more performant low-level language like C/C++. This article describes the benefits of calling production-ready (C/C++) ports in Python for functional evaluation and analysis. Assessment tools developed previously during the experimentation stage can be reused. Furthermore, the complexity for experimentation with various internal parameters is reduced, which can optimize costs and expensive debugging prior to the final deployment.</description></item><item><title>[Medium] From C to machine code — demystifying CPU mechanics</title><link>https://kopytjuk.github.io/posts/from-c-to-machine/</link><pubDate>Thu, 05 Dec 2019 18:00:00 +0100</pubDate><guid>https://kopytjuk.github.io/posts/from-c-to-machine/</guid><description>Read the article on Medium.</description></item><item><title>[Medium] Simulating non-linear dynamic systems with Python</title><link>https://kopytjuk.github.io/posts/simulating-dynamic-systems/</link><pubDate>Fri, 08 Nov 2019 18:00:00 +0100</pubDate><guid>https://kopytjuk.github.io/posts/simulating-dynamic-systems/</guid><description>Read the article on Medium.</description></item><item><title>[Medium] On Understanding of Central Limit Theorem (visually)</title><link>https://kopytjuk.github.io/posts/central-limit-theorem/</link><pubDate>Mon, 28 Oct 2019 18:00:00 +0100</pubDate><guid>https://kopytjuk.github.io/posts/central-limit-theorem/</guid><description>Read the article on Medium.</description></item><item><title>[Medium] Sum of two random variables or the rocky path to understanding convolutions of probability distributions</title><link>https://kopytjuk.github.io/posts/sum-two-rand-vars/</link><pubDate>Thu, 03 Oct 2019 18:00:00 +0100</pubDate><guid>https://kopytjuk.github.io/posts/sum-two-rand-vars/</guid><description>Read the article on Medium.</description></item><item><title/><link>https://kopytjuk.github.io/disclaimer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kopytjuk.github.io/disclaimer/</guid><description>Disclaimer Last updated: March 21, 2022
Interpretation and Definitions Interpretation The words of which the initial letter is capitalized have meanings defined under the following conditions. The following definitions shall have the same meaning regardless of whether they appear in singular or in plural.
Definitions For the purposes of this Disclaimer:
Company (referred to as either &amp;ldquo;the Company&amp;rdquo;, &amp;ldquo;We&amp;rdquo;, &amp;ldquo;Us&amp;rdquo; or &amp;ldquo;Our&amp;rdquo; in this Disclaimer) refers to Marat's blog. Service refers to the Website.</description></item><item><title>About</title><link>https://kopytjuk.github.io/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kopytjuk.github.io/about/</guid><description>My name is Marat, I was born in the early 90&amp;rsquo;s in Witebsk (Belarus), currently work and live in Heilbronn (South Germany). I studied mechatronics for Bachelor. and automated driving for Masters degree. My mother language is Russian, but over the time the available vocabulary in German and English got more advanced.
I count myself as an interdisciplinary developer who believes that combining cross-domain expertise in mechatronical systems, robotics, software engineering, cloud and probability theory is essential towards inspiring, efficient, future-proof and reliable products.</description></item></channel></rss>