<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on Marat's blog</title><link>https://kopytjuk.github.io/posts/</link><description>Recent content in Posts on Marat's blog</description><generator>Hugo -- 0.148.0</generator><language>en-us</language><lastBuildDate>Sat, 09 Aug 2025 10:10:00 +0200</lastBuildDate><atom:link href="https://kopytjuk.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Solar Panel Segmentation: Reseach on projects, datasets and models</title><link>https://kopytjuk.github.io/posts/solar-panel-models/</link><pubDate>Sat, 09 Aug 2025 10:10:00 +0200</pubDate><guid>https://kopytjuk.github.io/posts/solar-panel-models/</guid><description>&lt;h2 id="recap">Recap&lt;/h2>
&lt;p>In my previous &lt;a href="https://kopytjuk.github.io/posts/solar-panel-analysis">post&lt;/a> I described the usage of segmentation models
to detect roof-mounted solar panels from aerial images. Together with publicly available solar yield
maps the size of solar panels can be used to estimate the annual energy yield (in kWh) for a single
building. This information may be helpful for municipalities or utility companies to understand the energy
network or to decide upon a location for large battery storage facilities.&lt;/p></description></item><item><title>Solar Panel Energy Yield: Part I</title><link>https://kopytjuk.github.io/posts/solar-panel-analysis/</link><pubDate>Wed, 26 Feb 2025 18:48:18 +0100</pubDate><guid>https://kopytjuk.github.io/posts/solar-panel-analysis/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Have you ever wondered how many households in your neighborhood have a solar panel on their roof and
how much solar energy is being harnessed?&lt;/p>
&lt;p>By combining the power of aerial imagery, solar radiation maps and machine learning we can address those
questions. In this post I will explore an approach of detecting solar panels and estimating their annual energy yield.
I try to explain my idea step by step with many images and example calculations as possible.&lt;/p></description></item><item><title>Bringing accident scene diagrams to life for AV simulation</title><link>https://kopytjuk.github.io/posts/bringing-crash-scene-diagrams-to-life/</link><pubDate>Sun, 27 Nov 2022 14:30:00 +0200</pubDate><guid>https://kopytjuk.github.io/posts/bringing-crash-scene-diagrams-to-life/</guid><description>&lt;p>&lt;img alt="accident" loading="lazy" src="https://kopytjuk.github.io/posts/bringing-crash-scene-diagrams-to-life/accident.jpg">&lt;/p>
&lt;div>
&lt;h2>Table Of Contents&lt;/h2>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#foreword">Foreword&lt;/a>&lt;/li>
&lt;li>&lt;a href="#using-nhtsa-accidents-to-improve-safety">Using NHTSA accidents to improve safety&lt;/a>&lt;/li>
&lt;li>&lt;a href="#methodology">Methodology&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#step-1-extracting-vehicle-shapes-from-the-diagram">Step 1: Extracting vehicle shapes from the diagram&lt;/a>&lt;/li>
&lt;li>&lt;a href="#step-2-associate-shapes-to-actual-vehicles">Step 2: Associate shapes to actual vehicles&lt;/a>&lt;/li>
&lt;li>&lt;a href="#step-3-order-waypoints-by-occurrence">Step 3: Order waypoints by occurrence&lt;/a>&lt;/li>
&lt;li>&lt;a href="#step-4-generate-realistic-trajectories">Step 4: Generate realistic trajectories&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#summary-tldr">Summary (TL;DR;)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#references">References&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/div>
&lt;h2 id="foreword">Foreword&lt;/h2>
&lt;p>When it comes to safety of autonomous vehicles (AV), we as a society often claim that such a system must be safer as an average human driver.
To validate this requirement, the industry pushes metrics such as accident-free travelled distance, expecting to cover the most critical situations an AV would face.&lt;/p></description></item><item><title>An extensible and modular architecture for evaluation of dynamic systems in real world environments</title><link>https://kopytjuk.github.io/posts/kpi-architecture/</link><pubDate>Mon, 21 Mar 2022 11:00:00 +0100</pubDate><guid>https://kopytjuk.github.io/posts/kpi-architecture/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Evaluating complex systems operating in noisy real world environments is hard. Especially if you are dealing with dynamic behaviour over time, the requirements to the evaluation toolchain grow with every novel insight. In the beginning, you just want to compute just a single number describing algorithm&amp;rsquo;s performance (like mean squared error - &lt;em>MSE&lt;/em>), but over the project&amp;rsquo;s lifetime your requirements to the evaluation framework grow: at some point you wish to generate static visualizations, create reports over a time range, dig deep at some specific situations or simply render both the algorithm&amp;rsquo;s output and the corresponding &lt;em>ground-truth&lt;/em> (GT) in a video file for human analysis.&lt;/p></description></item><item><title>Vehicle trajectory analysis in Frenet-Serret coordinates on the Large-Scale Roundabout Drone Dataset (OpenDD)</title><link>https://kopytjuk.github.io/posts/open-dd-analysis/</link><pubDate>Sun, 06 Mar 2022 12:00:00 +0100</pubDate><guid>https://kopytjuk.github.io/posts/open-dd-analysis/</guid><description>&lt;p>&lt;img alt="title" loading="lazy" src="https://kopytjuk.github.io/posts/open-dd-analysis/title.png">&lt;/p>
&lt;h2 id="tldr">TL;DR; &lt;/h2>
&lt;p>This blog post presents the benefits of Frenet-Serret coordinate system for driving trajectory analysis (in Python). This system is defined by a reference path, such as a driving lane and facilitates traffic analysis. As an showcase example, the delay times and distances between vehicles in a roundabout setting are analyzed. The trajectories captured from a bird-view perspective (DJI drone) from the OpenDD dataset are used. In the end of the post, the reader will value the advantages of Frenet-Serret frames compared to a conventional metric approach when it comes to trajectory analysis in a real-world setting. Moreover, you will have a handy mathematical tool to detect tipsy drivers!&lt;/p></description></item><item><title>Wrap C++ algorithms in Python for pre-production evaluation and experimentation.</title><link>https://kopytjuk.github.io/posts/wrapping-cpp-algorithms/</link><pubDate>Mon, 13 Sep 2021 11:19:40 +0100</pubDate><guid>https://kopytjuk.github.io/posts/wrapping-cpp-algorithms/</guid><description>&lt;h2 id="tldr">TLDR;&lt;/h2>
&lt;p>In &lt;em>model based design&lt;/em> paradigm one often implements a proof-of-concept solution in a scripting language before porting the logic to a more performant low-level language like C/C++.
This article describes the benefits of calling production-ready (C/C++) ports in Python for &lt;strong>functional&lt;/strong> evaluation and analysis. Assessment tools developed previously during the experimentation stage can be reused. Furthermore, the complexity for experimentation with various internal parameters is reduced, which can optimize costs and expensive debugging prior to the final deployment. In the end of the article the key benefits and limitations are presented.&lt;/p></description></item><item><title>[Medium] From C to machine code — demystifying CPU mechanics</title><link>https://kopytjuk.github.io/posts/from-c-to-machine/</link><pubDate>Thu, 05 Dec 2019 18:00:00 +0100</pubDate><guid>https://kopytjuk.github.io/posts/from-c-to-machine/</guid><description>&lt;p>Read the article on &lt;a href="https://medium.com/@kopytjuk/from-c-to-machine-code-demystifying-cpu-mechanics-e5d4cf967e8">Medium&lt;/a>.&lt;/p></description></item><item><title>[Medium] Simulating non-linear dynamic systems with Python</title><link>https://kopytjuk.github.io/posts/simulating-dynamic-systems/</link><pubDate>Fri, 08 Nov 2019 18:00:00 +0100</pubDate><guid>https://kopytjuk.github.io/posts/simulating-dynamic-systems/</guid><description>&lt;p>Read the article on &lt;a href="https://towardsdatascience.com/on-simulating-non-linear-dynamic-systems-with-python-or-how-to-gain-insights-without-using-ml-353eebf8dcc3">Medium&lt;/a>.&lt;/p></description></item><item><title>[Medium] On Understanding of Central Limit Theorem (visually)</title><link>https://kopytjuk.github.io/posts/central-limit-theorem/</link><pubDate>Mon, 28 Oct 2019 18:00:00 +0100</pubDate><guid>https://kopytjuk.github.io/posts/central-limit-theorem/</guid><description>&lt;p>Read the article on &lt;a href="https://medium.com/analytics-vidhya/on-understanding-of-central-limit-theorem-visually-f70f9b0c02dc">Medium&lt;/a>.&lt;/p></description></item><item><title>[Medium] Sum of two random variables or the rocky path to understanding convolutions of probability distributions</title><link>https://kopytjuk.github.io/posts/sum-two-rand-vars/</link><pubDate>Thu, 03 Oct 2019 18:00:00 +0100</pubDate><guid>https://kopytjuk.github.io/posts/sum-two-rand-vars/</guid><description>&lt;p>&lt;a href="https://www.youtube.com/watch?v=U84pzAQRJfo">&lt;img alt="Convolution" loading="lazy" src="https://img.youtube.com/vi/U84pzAQRJfo/0.jpg">&lt;/a>&lt;/p>
&lt;p>Read the article on &lt;a href="https://medium.com/analytics-vidhya/sum-of-two-random-variables-or-the-rocky-path-to-understanding-convolutions-of-probability-b0fc29aca3b5">Medium&lt;/a>.&lt;/p></description></item></channel></rss>