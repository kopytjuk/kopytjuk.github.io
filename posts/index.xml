<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on Marat's blog</title><link>https://kopytjuk.github.io/posts/</link><description>Recent content in Posts on Marat's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 06 Mar 2022 12:00:00 +0100</lastBuildDate><atom:link href="https://kopytjuk.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Vehicle trajectory analysis in Frenet-Serret coordinates on the Large-Scale Roundabout Drone Dataset (OpenDD)</title><link>https://kopytjuk.github.io/posts/open-dd-analysis/</link><pubDate>Sun, 06 Mar 2022 12:00:00 +0100</pubDate><guid>https://kopytjuk.github.io/posts/open-dd-analysis/</guid><description>TL;DR; This blog posts presents the of Frenet-Serret coordinate system for driving trajectory analysis. This system is defined by a reference path, such as a driving lane. As an showcase example, the delay times and distances between vehicles in a roundabout setting are analyzed. The trajectories recorded in the OpenDD dataset are used. In the end of the post, the reader will understand the benefits of Frenet-Serret frames compared to a conventional metric approach when it comes to trajectory analysis in a real world setting.</description></item><item><title>Wrap C++ algorithms in Python for pre-production evaluation and experimentation.</title><link>https://kopytjuk.github.io/posts/wrapping-cpp-algorithms/</link><pubDate>Mon, 13 Sep 2021 11:19:40 +0100</pubDate><guid>https://kopytjuk.github.io/posts/wrapping-cpp-algorithms/</guid><description>TLDR; In model based design paradigm one often implements a proof-of-concept solution in a scripting language before porting the logic to a more performant low-level language like C/C++. This article describes the benefits of calling production-ready (C/C++) ports in Python for functional evaluation and analysis. Assessment tools developed previously during the experimentation stage can be reused. Furthermore, the complexity for experimentation with various internal parameters is reduced, which can optimize costs and expensive debugging prior to the final deployment.</description></item></channel></rss>